实现并发性
在有些程序中，大部分时间都花在等待速度比cpu慢的资源(磁盘和网络资源)上
异步编程是一种编程范式，可处理速度缓慢且不可预测的资源(用户），它被广泛用于打造响应迅速的服务和用户界面。
本节使用协程和响应式编程进行异步编程
本章主要内容：
存储器层次结构
回调函数
future
事件循环
使用asyncio编写协程
将同步代码转换为异步代码
使用RxRy进行响应式编程
使用被观察者
使用RxRy打造内存监视器
一.存储器层次结构
异步编程可以高效的处理多种资源，需要处理外部请求，外部请求到达顺序不可测。
(1.)等待IO
寄存器，缓存，内存，外存
(2.)并发
并发是一种实现系统同时处理多个请求的方式，其原理是在等待资源期间着手处理其他资源。将任务划分成可不按顺序执行的子任务，这样就能同时处理多个子任务。
如network_request.py模拟一个简单的网络通信例子
二.回调函数
这个例子主要是由于程序阻塞造成的，最简单的方法是使用回调函数，其策略与我们叫出租车相似。
假设你在饭店喝酒，而外面下着雨，你不想去坐公交，于是决定叫辆出租车，并让司机到达后给你打电话。这样就避免雨中等待。
如callback.py所示
三.future
future是一种更便利的模式，可用来跟踪异步调用的结果。前面的代码，没有返回结果，只是跟踪一个回调函数，并在结果就绪后传递这个回调函数。目前为止，没有跟踪资源的
有效途径
future是一种抽象，可帮助我们跟踪请求的资源并等到他可用。在Pyhton中，concurrent.future.Future类提供了一种future实现。要创建这个类的实例，可调用其构造函数且不提供
任何参数。详见async_future.py

