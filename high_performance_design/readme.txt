高性能设计
设计应用程序的指南，python项目最佳实践
主要内容：
为普通应用程序。数值计算程序和大数据应用程序选择合适的性能优化策略
组织python项目
使用虚拟环境和容器隔离python
使用TravisCI持续集成
一.选择合适的策略
应用程序类型：web服务，系统脚本，游戏，机器学习等。
对于web服务，通过优化使其响应时间极短；处理尽可能多的请求，同时使用尽可能少的资源。而数值计算代码可能需要较长时间才能运行完毕，因此提高系统能够处理的数据量很重要，在乎吞吐量。
有些体系结构(嵌入试系统和小型设备)的CPU处理能力和内存可能有限。
软件产品需要快速迭代，快速修改。通常应当选择使用纯粹的pyhton库，而不是推展，但久经考验的库可以例外(numpy).过早优化是万恶之源
(1.普通应用程序)
web应用和移动应用后端等普通应用程序，通常需要调用远程服务和数据库。这种情况下，使用异步框架可能大有裨益，因为这将改变应用程序的逻辑，系统设计，响应速度等。
使用异步编程还让微服务实现和使用起来比较容易。微服务虽然没有权威的定义，但可将其视为专注于应用程序某个方面的远程服务，如身份验证。
微服务背后的理念是，可将通过简单协议(gRPC和REST调用，或专用消息队列)进行通信的微服务组合。这种体系与单体应用程序不同。在单体应用程序中，所有的服务都是由同一个python进程处理。
微服务的优点是，应用程序的不同部分解耦。小型的服务可由不同的团队实现和维护，还可在不同的时间进行更新和部署。由于通信是通过简单的协议进行的，可使用比python更合适的语言来实现微服务。
如果对服务的性能不满意，可以移植到pypy或者Cython。
(2.数值计算代码)
如果你要编写数值计算代码，极好的策略是一开始就使用numpy。numpy的性能几乎能够与c语言相媲美，无需进一步优化。
Cython是一个成熟的工具，被scipy和scikit-learn采用。Cython包含显示的静态类型声明。
执行Cython前必须编译。分布和部署工作更复杂。
Numba API只要求定义纯粹的python函数。这些函数被动态的编译，numba要求目标平台安装LLVM工具链。
conda以打好包的方式提供numba和Cython，包中包含所有的依赖。所以可以在conda上部署Cython。
使用上述方法，对于串行代码，几乎可获得最佳的性能。
对于并行程序可使用简单接口multiprocessing.Pool.
为避免启动多个进程的时间和开销，可使用线程。numpy通常会释放GIL。
Dask是numpy的替代品